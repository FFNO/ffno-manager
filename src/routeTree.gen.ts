/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as UnitsIndexImport } from './routes/units/index'
import { Route as ManagersRequestsIndexImport } from './routes/managers/requests/index'
import { Route as ManagersPropertiesIndexImport } from './routes/managers/properties/index'
import { Route as ManagersInvoicesIndexImport } from './routes/managers/invoices/index'
import { Route as ManagersContactsIndexImport } from './routes/managers/contacts/index'
import { Route as ManagersPropertiesPropertyIdCreateUnitImport } from './routes/managers/properties_/$propertyId/create-unit'

// Create Virtual Routes

const AuthSignInLazyImport = createFileRoute('/auth/sign-in')()
const ManagersUnitsUnitIdLazyImport = createFileRoute(
  '/managers/units/$unitId',
)()
const ManagersRequestsCreateLazyImport = createFileRoute(
  '/managers/requests/create',
)()
const ManagersPropertiesCreateLazyImport = createFileRoute(
  '/managers/properties/create',
)()
const ManagersPropertiesPropertyIdLazyImport = createFileRoute(
  '/managers/properties/$propertyId',
)()
const ManagersInvoicesCreateLazyImport = createFileRoute(
  '/managers/invoices/create',
)()
const ManagersContactsCreateLazyImport = createFileRoute(
  '/managers/contacts/create',
)()
const ManagersContactsContactIdLazyImport = createFileRoute(
  '/managers/contacts/$contactId',
)()

// Create/Update Routes

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const UnitsIndexRoute = UnitsIndexImport.update({
  path: '/units/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/units/index.lazy').then((d) => d.Route))

const AuthSignInLazyRoute = AuthSignInLazyImport.update({
  path: '/auth/sign-in',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/auth/sign-in.lazy').then((d) => d.Route))

const ManagersRequestsIndexRoute = ManagersRequestsIndexImport.update({
  path: '/managers/requests/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/managers/requests/index.lazy').then((d) => d.Route),
)

const ManagersPropertiesIndexRoute = ManagersPropertiesIndexImport.update({
  path: '/managers/properties/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/managers/properties/index.lazy').then((d) => d.Route),
)

const ManagersInvoicesIndexRoute = ManagersInvoicesIndexImport.update({
  path: '/managers/invoices/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/managers/invoices/index.lazy').then((d) => d.Route),
)

const ManagersContactsIndexRoute = ManagersContactsIndexImport.update({
  path: '/managers/contacts/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/managers/contacts/index.lazy').then((d) => d.Route),
)

const ManagersUnitsUnitIdLazyRoute = ManagersUnitsUnitIdLazyImport.update({
  path: '/managers/units/$unitId',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/managers/units/$unitId.lazy').then((d) => d.Route),
)

const ManagersRequestsCreateLazyRoute = ManagersRequestsCreateLazyImport.update(
  {
    path: '/managers/requests/create',
    getParentRoute: () => rootRoute,
  } as any,
).lazy(() =>
  import('./routes/managers/requests/create.lazy').then((d) => d.Route),
)

const ManagersPropertiesCreateLazyRoute =
  ManagersPropertiesCreateLazyImport.update({
    path: '/managers/properties/create',
    getParentRoute: () => rootRoute,
  } as any).lazy(() =>
    import('./routes/managers/properties/create.lazy').then((d) => d.Route),
  )

const ManagersPropertiesPropertyIdLazyRoute =
  ManagersPropertiesPropertyIdLazyImport.update({
    path: '/managers/properties/$propertyId',
    getParentRoute: () => rootRoute,
  } as any).lazy(() =>
    import('./routes/managers/properties/$propertyId.lazy').then(
      (d) => d.Route,
    ),
  )

const ManagersInvoicesCreateLazyRoute = ManagersInvoicesCreateLazyImport.update(
  {
    path: '/managers/invoices/create',
    getParentRoute: () => rootRoute,
  } as any,
).lazy(() =>
  import('./routes/managers/invoices/create.lazy').then((d) => d.Route),
)

const ManagersContactsCreateLazyRoute = ManagersContactsCreateLazyImport.update(
  {
    path: '/managers/contacts/create',
    getParentRoute: () => rootRoute,
  } as any,
).lazy(() =>
  import('./routes/managers/contacts/create.lazy').then((d) => d.Route),
)

const ManagersContactsContactIdLazyRoute =
  ManagersContactsContactIdLazyImport.update({
    path: '/managers/contacts/$contactId',
    getParentRoute: () => rootRoute,
  } as any).lazy(() =>
    import('./routes/managers/contacts/$contactId.lazy').then((d) => d.Route),
  )

const ManagersPropertiesPropertyIdCreateUnitRoute =
  ManagersPropertiesPropertyIdCreateUnitImport.update({
    path: '/managers/properties/$propertyId/create-unit',
    getParentRoute: () => rootRoute,
  } as any).lazy(() =>
    import('./routes/managers/properties_/$propertyId/create-unit.lazy').then(
      (d) => d.Route,
    ),
  )

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/auth/sign-in': {
      preLoaderRoute: typeof AuthSignInLazyImport
      parentRoute: typeof rootRoute
    }
    '/units/': {
      preLoaderRoute: typeof UnitsIndexImport
      parentRoute: typeof rootRoute
    }
    '/managers/contacts/$contactId': {
      preLoaderRoute: typeof ManagersContactsContactIdLazyImport
      parentRoute: typeof rootRoute
    }
    '/managers/contacts/create': {
      preLoaderRoute: typeof ManagersContactsCreateLazyImport
      parentRoute: typeof rootRoute
    }
    '/managers/invoices/create': {
      preLoaderRoute: typeof ManagersInvoicesCreateLazyImport
      parentRoute: typeof rootRoute
    }
    '/managers/properties/$propertyId': {
      preLoaderRoute: typeof ManagersPropertiesPropertyIdLazyImport
      parentRoute: typeof rootRoute
    }
    '/managers/properties/create': {
      preLoaderRoute: typeof ManagersPropertiesCreateLazyImport
      parentRoute: typeof rootRoute
    }
    '/managers/requests/create': {
      preLoaderRoute: typeof ManagersRequestsCreateLazyImport
      parentRoute: typeof rootRoute
    }
    '/managers/units/$unitId': {
      preLoaderRoute: typeof ManagersUnitsUnitIdLazyImport
      parentRoute: typeof rootRoute
    }
    '/managers/contacts/': {
      preLoaderRoute: typeof ManagersContactsIndexImport
      parentRoute: typeof rootRoute
    }
    '/managers/invoices/': {
      preLoaderRoute: typeof ManagersInvoicesIndexImport
      parentRoute: typeof rootRoute
    }
    '/managers/properties/': {
      preLoaderRoute: typeof ManagersPropertiesIndexImport
      parentRoute: typeof rootRoute
    }
    '/managers/requests/': {
      preLoaderRoute: typeof ManagersRequestsIndexImport
      parentRoute: typeof rootRoute
    }
    '/managers/properties/$propertyId/create-unit': {
      preLoaderRoute: typeof ManagersPropertiesPropertyIdCreateUnitImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren([
  IndexRoute,
  AuthSignInLazyRoute,
  UnitsIndexRoute,
  ManagersContactsContactIdLazyRoute,
  ManagersContactsCreateLazyRoute,
  ManagersInvoicesCreateLazyRoute,
  ManagersPropertiesPropertyIdLazyRoute,
  ManagersPropertiesCreateLazyRoute,
  ManagersRequestsCreateLazyRoute,
  ManagersUnitsUnitIdLazyRoute,
  ManagersContactsIndexRoute,
  ManagersInvoicesIndexRoute,
  ManagersPropertiesIndexRoute,
  ManagersRequestsIndexRoute,
  ManagersPropertiesPropertyIdCreateUnitRoute,
])

/* prettier-ignore-end */
