/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as RequestsIndexImport } from './routes/requests/index'
import { Route as PropertiesIndexImport } from './routes/properties/index'
import { Route as InvoicesIndexImport } from './routes/invoices/index'
import { Route as ContactsIndexImport } from './routes/contacts/index'

// Create Virtual Routes

const UnitsUnitIdLazyImport = createFileRoute('/units/$unitId')()
const RequestsCreateLazyImport = createFileRoute('/requests/create')()
const PropertiesCreateLazyImport = createFileRoute('/properties/create')()
const PropertiesPropertyIdLazyImport = createFileRoute(
  '/properties/$propertyId',
)()
const InvoicesCreateLazyImport = createFileRoute('/invoices/create')()
const ContactsCreateLazyImport = createFileRoute('/contacts/create')()
const ContactsContactIdLazyImport = createFileRoute('/contacts/$contactId')()
const AuthSignInLazyImport = createFileRoute('/auth/sign-in')()

// Create/Update Routes

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const RequestsIndexRoute = RequestsIndexImport.update({
  path: '/requests/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/requests/index.lazy').then((d) => d.Route),
)

const PropertiesIndexRoute = PropertiesIndexImport.update({
  path: '/properties/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/properties/index.lazy').then((d) => d.Route),
)

const InvoicesIndexRoute = InvoicesIndexImport.update({
  path: '/invoices/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/invoices/index.lazy').then((d) => d.Route),
)

const ContactsIndexRoute = ContactsIndexImport.update({
  path: '/contacts/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/contacts/index.lazy').then((d) => d.Route),
)

const UnitsUnitIdLazyRoute = UnitsUnitIdLazyImport.update({
  path: '/units/$unitId',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/units/$unitId.lazy').then((d) => d.Route))

const RequestsCreateLazyRoute = RequestsCreateLazyImport.update({
  path: '/requests/create',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/requests/create.lazy').then((d) => d.Route),
)

const PropertiesCreateLazyRoute = PropertiesCreateLazyImport.update({
  path: '/properties/create',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/properties/create.lazy').then((d) => d.Route),
)

const PropertiesPropertyIdLazyRoute = PropertiesPropertyIdLazyImport.update({
  path: '/properties/$propertyId',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/properties/$propertyId.lazy').then((d) => d.Route),
)

const InvoicesCreateLazyRoute = InvoicesCreateLazyImport.update({
  path: '/invoices/create',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/invoices/create.lazy').then((d) => d.Route),
)

const ContactsCreateLazyRoute = ContactsCreateLazyImport.update({
  path: '/contacts/create',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/contacts/create.lazy').then((d) => d.Route),
)

const ContactsContactIdLazyRoute = ContactsContactIdLazyImport.update({
  path: '/contacts/$contactId',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/contacts/$contactId.lazy').then((d) => d.Route),
)

const AuthSignInLazyRoute = AuthSignInLazyImport.update({
  path: '/auth/sign-in',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/auth/sign-in.lazy').then((d) => d.Route))

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/auth/sign-in': {
      preLoaderRoute: typeof AuthSignInLazyImport
      parentRoute: typeof rootRoute
    }
    '/contacts/$contactId': {
      preLoaderRoute: typeof ContactsContactIdLazyImport
      parentRoute: typeof rootRoute
    }
    '/contacts/create': {
      preLoaderRoute: typeof ContactsCreateLazyImport
      parentRoute: typeof rootRoute
    }
    '/invoices/create': {
      preLoaderRoute: typeof InvoicesCreateLazyImport
      parentRoute: typeof rootRoute
    }
    '/properties/$propertyId': {
      preLoaderRoute: typeof PropertiesPropertyIdLazyImport
      parentRoute: typeof rootRoute
    }
    '/properties/create': {
      preLoaderRoute: typeof PropertiesCreateLazyImport
      parentRoute: typeof rootRoute
    }
    '/requests/create': {
      preLoaderRoute: typeof RequestsCreateLazyImport
      parentRoute: typeof rootRoute
    }
    '/units/$unitId': {
      preLoaderRoute: typeof UnitsUnitIdLazyImport
      parentRoute: typeof rootRoute
    }
    '/contacts/': {
      preLoaderRoute: typeof ContactsIndexImport
      parentRoute: typeof rootRoute
    }
    '/invoices/': {
      preLoaderRoute: typeof InvoicesIndexImport
      parentRoute: typeof rootRoute
    }
    '/properties/': {
      preLoaderRoute: typeof PropertiesIndexImport
      parentRoute: typeof rootRoute
    }
    '/requests/': {
      preLoaderRoute: typeof RequestsIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren([
  IndexRoute,
  AuthSignInLazyRoute,
  ContactsContactIdLazyRoute,
  ContactsCreateLazyRoute,
  InvoicesCreateLazyRoute,
  PropertiesPropertyIdLazyRoute,
  PropertiesCreateLazyRoute,
  RequestsCreateLazyRoute,
  UnitsUnitIdLazyRoute,
  ContactsIndexRoute,
  InvoicesIndexRoute,
  PropertiesIndexRoute,
  RequestsIndexRoute,
])

/* prettier-ignore-end */
