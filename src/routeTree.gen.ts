/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as RequestsIndexImport } from './routes/requests/index'
import { Route as ManagersIndexImport } from './routes/managers/index'
import { Route as TenantsUnitsIndexImport } from './routes/tenants/units/index'
import { Route as ManagersPropertiesIndexImport } from './routes/managers/properties/index'
import { Route as ManagersInvoicesIndexImport } from './routes/managers/invoices/index'
import { Route as ManagersContactsIndexImport } from './routes/managers/contacts/index'
import { Route as ManagersPropertiesPropertyIdCreateUnitImport } from './routes/managers/properties_/$propertyId/create-unit'

// Create Virtual Routes

const RequestsCreateLazyImport = createFileRoute('/requests/create')()
const RequestsRequestIdLazyImport = createFileRoute('/requests/$requestId')()
const AuthSignInLazyImport = createFileRoute('/auth/sign-in')()
const PublicInvoicesInvoiceIdLazyImport = createFileRoute(
  '/public/invoices/$invoiceId',
)()
const ManagersUnitsUnitIdLazyImport = createFileRoute(
  '/managers/units/$unitId',
)()
const ManagersPropertiesCreateLazyImport = createFileRoute(
  '/managers/properties/create',
)()
const ManagersPropertiesPropertyIdLazyImport = createFileRoute(
  '/managers/properties/$propertyId',
)()
const ManagersInvoicesCreateLazyImport = createFileRoute(
  '/managers/invoices/create',
)()
const ManagersContactsCreateLazyImport = createFileRoute(
  '/managers/contacts/create',
)()
const ManagersContactsContactIdLazyImport = createFileRoute(
  '/managers/contacts/$contactId',
)()

// Create/Update Routes

const RequestsIndexRoute = RequestsIndexImport.update({
  path: '/requests/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/requests/index.lazy').then((d) => d.Route),
)

const ManagersIndexRoute = ManagersIndexImport.update({
  path: '/managers/',
  getParentRoute: () => rootRoute,
} as any)

const RequestsCreateLazyRoute = RequestsCreateLazyImport.update({
  path: '/requests/create',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/requests/create.lazy').then((d) => d.Route),
)

const RequestsRequestIdLazyRoute = RequestsRequestIdLazyImport.update({
  path: '/requests/$requestId',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/requests/$requestId.lazy').then((d) => d.Route),
)

const AuthSignInLazyRoute = AuthSignInLazyImport.update({
  path: '/auth/sign-in',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/auth/sign-in.lazy').then((d) => d.Route))

const TenantsUnitsIndexRoute = TenantsUnitsIndexImport.update({
  path: '/tenants/units/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/tenants/units/index.lazy').then((d) => d.Route),
)

const ManagersPropertiesIndexRoute = ManagersPropertiesIndexImport.update({
  path: '/managers/properties/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/managers/properties/index.lazy').then((d) => d.Route),
)

const ManagersInvoicesIndexRoute = ManagersInvoicesIndexImport.update({
  path: '/managers/invoices/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/managers/invoices/index.lazy').then((d) => d.Route),
)

const ManagersContactsIndexRoute = ManagersContactsIndexImport.update({
  path: '/managers/contacts/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/managers/contacts/index.lazy').then((d) => d.Route),
)

const PublicInvoicesInvoiceIdLazyRoute =
  PublicInvoicesInvoiceIdLazyImport.update({
    path: '/public/invoices/$invoiceId',
    getParentRoute: () => rootRoute,
  } as any).lazy(() =>
    import('./routes/public/invoices/$invoiceId.lazy').then((d) => d.Route),
  )

const ManagersUnitsUnitIdLazyRoute = ManagersUnitsUnitIdLazyImport.update({
  path: '/managers/units/$unitId',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/managers/units/$unitId.lazy').then((d) => d.Route),
)

const ManagersPropertiesCreateLazyRoute =
  ManagersPropertiesCreateLazyImport.update({
    path: '/managers/properties/create',
    getParentRoute: () => rootRoute,
  } as any).lazy(() =>
    import('./routes/managers/properties/create.lazy').then((d) => d.Route),
  )

const ManagersPropertiesPropertyIdLazyRoute =
  ManagersPropertiesPropertyIdLazyImport.update({
    path: '/managers/properties/$propertyId',
    getParentRoute: () => rootRoute,
  } as any).lazy(() =>
    import('./routes/managers/properties/$propertyId.lazy').then(
      (d) => d.Route,
    ),
  )

const ManagersInvoicesCreateLazyRoute = ManagersInvoicesCreateLazyImport.update(
  {
    path: '/managers/invoices/create',
    getParentRoute: () => rootRoute,
  } as any,
).lazy(() =>
  import('./routes/managers/invoices/create.lazy').then((d) => d.Route),
)

const ManagersContactsCreateLazyRoute = ManagersContactsCreateLazyImport.update(
  {
    path: '/managers/contacts/create',
    getParentRoute: () => rootRoute,
  } as any,
).lazy(() =>
  import('./routes/managers/contacts/create.lazy').then((d) => d.Route),
)

const ManagersContactsContactIdLazyRoute =
  ManagersContactsContactIdLazyImport.update({
    path: '/managers/contacts/$contactId',
    getParentRoute: () => rootRoute,
  } as any).lazy(() =>
    import('./routes/managers/contacts/$contactId.lazy').then((d) => d.Route),
  )

const ManagersPropertiesPropertyIdCreateUnitRoute =
  ManagersPropertiesPropertyIdCreateUnitImport.update({
    path: '/managers/properties/$propertyId/create-unit',
    getParentRoute: () => rootRoute,
  } as any).lazy(() =>
    import('./routes/managers/properties_/$propertyId/create-unit.lazy').then(
      (d) => d.Route,
    ),
  )

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/auth/sign-in': {
      preLoaderRoute: typeof AuthSignInLazyImport
      parentRoute: typeof rootRoute
    }
    '/requests/$requestId': {
      preLoaderRoute: typeof RequestsRequestIdLazyImport
      parentRoute: typeof rootRoute
    }
    '/requests/create': {
      preLoaderRoute: typeof RequestsCreateLazyImport
      parentRoute: typeof rootRoute
    }
    '/managers/': {
      preLoaderRoute: typeof ManagersIndexImport
      parentRoute: typeof rootRoute
    }
    '/requests/': {
      preLoaderRoute: typeof RequestsIndexImport
      parentRoute: typeof rootRoute
    }
    '/managers/contacts/$contactId': {
      preLoaderRoute: typeof ManagersContactsContactIdLazyImport
      parentRoute: typeof rootRoute
    }
    '/managers/contacts/create': {
      preLoaderRoute: typeof ManagersContactsCreateLazyImport
      parentRoute: typeof rootRoute
    }
    '/managers/invoices/create': {
      preLoaderRoute: typeof ManagersInvoicesCreateLazyImport
      parentRoute: typeof rootRoute
    }
    '/managers/properties/$propertyId': {
      preLoaderRoute: typeof ManagersPropertiesPropertyIdLazyImport
      parentRoute: typeof rootRoute
    }
    '/managers/properties/create': {
      preLoaderRoute: typeof ManagersPropertiesCreateLazyImport
      parentRoute: typeof rootRoute
    }
    '/managers/units/$unitId': {
      preLoaderRoute: typeof ManagersUnitsUnitIdLazyImport
      parentRoute: typeof rootRoute
    }
    '/public/invoices/$invoiceId': {
      preLoaderRoute: typeof PublicInvoicesInvoiceIdLazyImport
      parentRoute: typeof rootRoute
    }
    '/managers/contacts/': {
      preLoaderRoute: typeof ManagersContactsIndexImport
      parentRoute: typeof rootRoute
    }
    '/managers/invoices/': {
      preLoaderRoute: typeof ManagersInvoicesIndexImport
      parentRoute: typeof rootRoute
    }
    '/managers/properties/': {
      preLoaderRoute: typeof ManagersPropertiesIndexImport
      parentRoute: typeof rootRoute
    }
    '/tenants/units/': {
      preLoaderRoute: typeof TenantsUnitsIndexImport
      parentRoute: typeof rootRoute
    }
    '/managers/properties/$propertyId/create-unit': {
      preLoaderRoute: typeof ManagersPropertiesPropertyIdCreateUnitImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren([
  AuthSignInLazyRoute,
  RequestsRequestIdLazyRoute,
  RequestsCreateLazyRoute,
  ManagersIndexRoute,
  RequestsIndexRoute,
  ManagersContactsContactIdLazyRoute,
  ManagersContactsCreateLazyRoute,
  ManagersInvoicesCreateLazyRoute,
  ManagersPropertiesPropertyIdLazyRoute,
  ManagersPropertiesCreateLazyRoute,
  ManagersUnitsUnitIdLazyRoute,
  PublicInvoicesInvoiceIdLazyRoute,
  ManagersContactsIndexRoute,
  ManagersInvoicesIndexRoute,
  ManagersPropertiesIndexRoute,
  TenantsUnitsIndexRoute,
  ManagersPropertiesPropertyIdCreateUnitRoute,
])

/* prettier-ignore-end */
